version: '${DockerVersion}'

services:
  rabbitmq:
    container_name: rabbitmq
    restart: on-failure
    image: rabbitmq:3.12.3-management-alpine
    ports:
      - "${RabbitMQServer_OutPORT}:${RabbitMQServerPort}"
      - "${RabbitMQManagement_OutPORT}:${RabbitMQManagementPort}"
    volumes:
      - "${PWD}/rabbitmq.conf:/etc/rabbitmq/conf.d"

  bookingapi:
    container_name: bookingapi
    restart: on-failure
    build:
      context: ./src/bookingapi
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${Environment}
      - ASPNETCORE_URLS=http://+:80
    volumes:
      - bookingapi:/src
    ports:
    - "${bookingapi_OutPORT}:${bookingapi_PORT}"
    depends_on:
      - rabbitmq

  enricher:
    container_name: enricher
    restart: on-failure
    build:
      context: ./src/contentenricher
      dockerfile: Dockerfile
    volumes:
      - enricher:/src
    depends_on:
      - rabbitmq

  postgres:
    container_name: postgres
    image: postgres:14-alpine
    ports:
      - 5432:5432
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=123456
      - POSTGRES_USER=root
      - POSTGRES_DB=Booking
  
  adminer:
    container_name: adminer
    image: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - postgres

  frontend:
    container_name: frontend
    restart: on-failure
    build:
      context: ./src/Frontend
      dockerfile: Dockerfile
    ports:
     - 5002:80

volumes:
  bookingapi:
  enricher:
  postgres:
  adminer:
  rabbitmq:
  
